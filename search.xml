<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第三章 Java的基本程序设计结构</title>
      <link href="/2021/06/30/JAVA/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E7%AC%AC%E4%B8%89%E7%AB%A0%20Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/"/>
      <url>/2021/06/30/JAVA/%E7%AC%AC%E4%B8%89%E7%AB%A0/%E7%AC%AC%E4%B8%89%E7%AB%A0%20Java%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><ul><li>一个简单的Java应用程序</li><li>注释</li><li>数据类型</li><li>变量与常量</li><li>运算符</li><li>字符串</li><li>输入输出</li><li>控制流</li><li>大数</li><li>数组</li></ul><h4 id="3-1-一个简单的Java应用程序"><a href="#3-1-一个简单的Java应用程序" class="headerlink" title="3.1 一个简单的Java应用程序"></a>3.1 一个简单的Java应用程序</h4><p>public class FirstSample{</p><p>​        public static void main(String[] args){</p><p>​          System.out.println(“We will not use ‘Hello World”);</p><p>​        }</p><p>}</p><p>关键字public称为访问修饰符（access modifer），控制程序其他部分对这段代码的访问级别。</p><p>关键字class表明Java程序中的全部内容都包含在类中。（类可以理解为程序逻辑的一个容器，程序逻辑定义了应用程序的行为），Java应用程序中的全部内容都必须放置在类中。</p><p>关键字后面紧跟类名，类名必须以大写字母开头，后面可以跟字母和数字的任意组合，不能使用Java保留字作为类名。（应采用驼峰命名法）</p><p>源代码的文件名必须与公共类的名字相同，并且以.java作为扩展名。</p><p>使用命令运行程序java …..</p><p>当使用java ClassName运行已编译的程序时，Java虚拟机总是从指定类中的main方法代码开始执行，在类的源文件中必须包含一个main方法。也可以自定义方法，并在main方法中调用。</p><p>注释：根据Java语言规范，main方法必须声明为public。</p><p> System.out.println是System.out调用了println方法。（Java通用语法object.method(parameters)）</p><h4 id="3-2-注释"><a href="#3-2-注释" class="headerlink" title="3.2 注释"></a>3.2 注释</h4><h4 id="3-3-数据类型"><a href="#3-3-数据类型" class="headerlink" title="3.3 数据类型"></a>3.3 数据类型</h4><p>注释：Java有一个能够表示任意精度的算数包，通常称为“大数”（big number），但是大数是一个Java对象。</p><h5 id="3-3-1-整形"><a href="#3-3-1-整形" class="headerlink" title="3.3.1 整形"></a>3.3.1 整形</h5><p>整形用于表示没有小数部分的数值，允许是负数。Java提供四种整形</p><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4字节</td><td align="center">-2147483648 ~ 2147483647（刚刚超过20亿）</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32768 ~ 32767</td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-9223372036854775808 ~ 923372036845775807</td></tr><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-128 ~ 127</td></tr></tbody></table><h5 id="3-3-2-浮点型"><a href="#3-3-2-浮点型" class="headerlink" title="3.3.2 浮点型"></a>3.3.2 浮点型</h5><p>浮点型用于表示有小数部分的数值。Java有两种浮点类型。</p><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4字节</td><td align="center">大约±3.40282347E+38F（有效位数为6 ~ 7位）</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">大约±1.79769313486231570E+308（有效位数为15位）</td></tr></tbody></table><p>double（双精度）表示这种类型的数值精度是float（单精度）类型的两倍。</p><p>float（单精度）类型的数值有一个后缀F或者f。没有后缀默认为double（双精度），也可以加D或者d。</p><p>所有浮点型数值的计算都遵循IEEE 754规范。下面表示溢出和出错情况的三个特殊的浮点数值：</p><ul><li>正无穷大</li><li>负无穷大</li><li>NaN（不是一个数字）</li></ul><p>注释：常量Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY和Double.NaN（以及相应的float类型的常量）分别表示这三个特殊的值。</p><p>​           不能用if(x == Double.NaN)判断是否等于Double.NaN，但是可以用if(Double.isNaN(X))进行判断。</p><p>警告：浮点型不适用于无法接受舍入误差的计算。列如：命令System.out.prin(2.0-1.1)将打印的是0.899999999999而不是期望的0.9，主要原因是浮点型采用二进</p><p>制系统表示，而在二进制系统中无法精确的表示分数1/10。</p><h5 id="3-3-3-char类型"><a href="#3-3-3-char类型" class="headerlink" title="3.3.3 char类型"></a>3.3.3 char类型</h5><p>char类型用于表示单个字符。</p><p>char类型要用单引号括起来。例如：’A’是编码值为65的字符常量。char类型的值可以表示为十六进制值，其范围从\u0000到\uFFFF。</p><center>表3-3 特殊字符的转义序列</center><table><thead><tr><th align="center">转义序列</th><th align="center">名称</th><th align="center">Unicode值</th></tr></thead><tbody><tr><td align="center">\b</td><td align="center">退格</td><td align="center">\u008</td></tr><tr><td align="center">\t</td><td align="center">制表</td><td align="center">\u009</td></tr><tr><td align="center">\n</td><td align="center">换行</td><td align="center">\u00a</td></tr><tr><td align="center">\r</td><td align="center">回车</td><td align="center">\u00d</td></tr><tr><td align="center">\“</td><td align="center">双引号</td><td align="center">\u022</td></tr><tr><td align="center">\‘</td><td align="center">单引号</td><td align="center">\u027</td></tr><tr><td align="center">\\</td><td align="center">反斜杠</td><td align="center">\u05c</td></tr></tbody></table><h5 id="3-3-4-Unicode和char类型"><a href="#3-3-4-Unicode和char类型" class="headerlink" title="3.3.4 Unicode和char类型"></a>3.3.4 Unicode和char类型</h5><h5 id="3-3-5-Boolean类型"><a href="#3-3-5-Boolean类型" class="headerlink" title="3.3.5 Boolean类型"></a>3.3.5 Boolean类型</h5><p>Boolean（布尔）类型有两个值：false和true，用来判定逻辑条件。整型值和布尔值之间不能进行相互转换。</p><h4 id="3-4-变量与常量"><a href="#3-4-变量与常量" class="headerlink" title="3.4 变量与常量"></a>3.4 变量与常量</h4><h5 id="3-4-1-声明变量"><a href="#3-4-1-声明变量" class="headerlink" title="3.4.1 声明变量"></a>3.4.1 声明变量</h5><p>在Java中，每个变量都有一个类型（type）。在声明变量时，先指定变量的类型，然后是变量名。（变量名必须是字母开头或者数字构成的序列，不能是Java的保留字）</p><h5 id="3-4-2-变量初始化"><a href="#3-4-2-变量初始化" class="headerlink" title="3.4.2 变量初始化"></a>3.4.2 变量初始化</h5><p>声明一个变量之后，必须使用赋值语句对变量进行显式初始化，千万不能使用末初始化。</p><h5 id="3-4-3-常量"><a href="#3-4-3-常量" class="headerlink" title="3.4.3 常量"></a>3.4.3 常量</h5><p>在Java中，利用关键字final指示常量。例如：</p><p>public classContants{</p><p>​    public static void main(String[]args){</p><p>​        final double CM_PER_INCH = 2.54;</p><p>​        double paperWidth = 8.5;</p><p>​        double paperHeigh = 11;</p><p>​        System.out.println(“Paper size in centimeters: “ + paperWidth *CM_PER_INCH + “ by “ + paperHeigh *CM_PER_INCH );    </p><p>​    }</p><p>}</p><p>关键字final表示这个变量只能被赋值一次，一旦被赋值之后，就不能够在更改了。</p><p>在Java中，经常希望某个变量在一个变量的多个方法中使用，通常将这些常量称为类常量（class constant）。</p><p>public classContants{</p><p>​    final double CM_PER_INCH = 2.54;</p><p>​    public static void main(String[]args){</p><p>​        double paperWidth = 8.5;</p><p>​        double paperHeigh = 11;</p><p>​        System.out.println(“Paper size in centimeters: “ + paperWidth *CM_PER_INCH + “ by “ + paperHeigh *CM_PER_INCH );    </p><p>​    }</p><p>}</p><p>类常量的定义位于main方法的外部。因此，在同一个类的其他方法中也可以使用这个常量。而且，如果一个常量被声明为public，那么其他类的方法也可以使用这个常量。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> 第三章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 Java程序设计环境</title>
      <link href="/2021/06/30/JAVA/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/06/30/JAVA/%E7%AC%AC%E4%BA%8C%E7%AB%A0/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><p>public class Welcome{</p><p>​        public static void main(String[] args){</p><p>​        System.out.print();</p><p>​        }</p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> 第二章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 程序语言设计</title>
      <link href="/2021/06/30/JAVA/%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/06/30/JAVA/%E7%AC%AC%E4%B8%80%E7%AB%A0/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h3 id="1-1-Java程序设计平台"><a href="#1-1-Java程序设计平台" class="headerlink" title="1.1 Java程序设计平台"></a>1.1 Java程序设计平台</h3><h3 id="1-2-Java关键术语"><a href="#1-2-Java关键术语" class="headerlink" title="1.2 Java关键术语"></a>1.2 Java关键术语</h3><h4 id="1-2-1-简单性"><a href="#1-2-1-简单性" class="headerlink" title="1.2.1 简单性"></a>1.2.1 简单性</h4><p>Java剔除了c++中很多很少使用、难以理解的、容易混淆的特性。没有头文件、指针运算、结构、联合、操作符重载、虚基类等。但是没有试图清除c++全部的不适当的特性，如witch语法。</p><p>“简单”的另一个含义是小。Java的目标之一是支持开发能够在小型机器独立运行的软件。基本解释器以及类支持大约40KB，再加上基础的标准类库和对线程的支持，大约需要增加175KB。</p><h4 id="1-2-2-面向对象"><a href="#1-2-2-面向对象" class="headerlink" title="1.2.2 面向对象"></a>1.2.2 面向对象</h4><p>用木匠打比方：</p><p>“面向对象”：始终关注的是所制作的椅子，其次才是使用的工具。</p><p>“面向过程”：主要考虑的是使用的工具。</p><h4 id="1-2-3-分布式"><a href="#1-2-3-分布式" class="headerlink" title="1.2.3 分布式"></a>1.2.3 分布式</h4><p>Java有一个丰富的类库，用于处理像HTTP和FTP之类的TCP/IP协议。Java应用程序能够通过URL打开和访问网络上的对象，其便捷程度就好像访问本地文件一样。</p><h4 id="1-2-4-健壮性"><a href="#1-2-4-健壮性" class="headerlink" title="1.2.4 健壮性"></a>1.2.4 健壮性</h4><p>Java的设计目标之一在于使得Java编写程序时具有多方面的可靠性。Java非常强调进行早期的问题检测、后期动态的（运行时）检测，以及消除容易出错的地方。Java编译器能够检测出其他语言仅在运行时才能检测出来的问题。</p><h4 id="1-2-5-安全性"><a href="#1-2-5-安全性" class="headerlink" title="1.2.5 安全性"></a>1.2.5 安全性</h4><p>Java要适用于网络/分布式环境。从一开始就设计成能够防范各种攻击，其中包括：</p><ul><li>运行时堆栈溢出，这是蠕虫和病毒常用的攻击手段</li><li>破坏自己的进程空间之外的内存</li><li>未经授权读写文件</li></ul><h4 id="1-2-6-体系结构中立（跨平台性）"><a href="#1-2-6-体系结构中立（跨平台性）" class="headerlink" title="1.2.6 体系结构中立（跨平台性）"></a>1.2.6 体系结构中立（跨平台性）</h4><ul><li>Java源文件–&gt;编译器–&gt;字节码文件</li><li>字节码文件–&gt;JVM–&gt;机器码</li></ul><h4 id="1-2-7-可移植性"><a href="#1-2-7-可移植性" class="headerlink" title="1.2.7 可移植性"></a>1.2.7 可移植性</h4><p>c/c++在不同的机器基本数据类型大小不同，Java中得数据类型在任何平台永远相同。</p><h4 id="1-2-8-解释性"><a href="#1-2-8-解释性" class="headerlink" title="1.2.8 解释性"></a>1.2.8 解释性</h4><p>Java解释器可以在任何移植了解释器的机器上直接执行Java字节码文件。</p><h4 id="1-2-9-高性能"><a href="#1-2-9-高性能" class="headerlink" title="1.2.9 高性能"></a>1.2.9 高性能</h4><h4 id="1-2-10-多线程"><a href="#1-2-10-多线程" class="headerlink" title="1.2.10 多线程"></a>1.2.10 多线程</h4><p>多线程可以带来更快的交互响应和实时得行为。</p><h4 id="1-2-11-动态性"><a href="#1-2-11-动态性" class="headerlink" title="1.2.11 动态性"></a>1.2.11 动态性</h4><p>Java库中可以自由地添加新方法和实例变量，而对客户端却没有任意影响。（如从intern上下载代码，在浏览器上运行。如果使用C/C++会很困难，但是Java较为容易实现）</p><h3 id="1-3-Java-applet与Internet"><a href="#1-3-Java-applet与Internet" class="headerlink" title="1.3 Java applet与Internet"></a>1.3 Java applet与Internet</h3><h3 id="1-4-Java发展史"><a href="#1-4-Java发展史" class="headerlink" title="1.4 Java发展史"></a>1.4 Java发展史</h3>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> 第一章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>落尘</title>
      <link href="/2021/06/01/%E6%84%8F/%E8%90%BD%E5%B0%98/"/>
      <url>/2021/06/01/%E6%84%8F/%E8%90%BD%E5%B0%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><pre><code>     青铜古色的城市终是闪耀着令人不可直视的余光，每个人都深深的低着昂贵的头颅，肩扛着令人刺骨的目光，矗立在孤独的彼岸，不知在哪一刻，每个人就仿佛就有了隔阂，为了生活，为了生活，为了生活而生活，亦或者为了或者而生活，彼此不能停下那令人窒息的步伐，赏识来自停下带来的真正的生活，每个人都畏惧停下带来的覆灭，只能一遍，一遍，麻木的进行自己手头正在进行的不知名的</code></pre>]]></content>
      
      
      <categories>
          
          <category> 意 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 落尘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孤</title>
      <link href="/2020/11/14/%E6%84%8F/%E5%AD%A4/"/>
      <url>/2020/11/14/%E6%84%8F/%E5%AD%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="半浮红尘"><a href="#半浮红尘" class="headerlink" title="半浮红尘"></a><div align = "center">半浮红尘</div></h2><p>​        不知多少次在半夜踌躇而醒，庆幸自己没有嗜烟的爱好，不然那满是烦躁的心中充斥的就不仅仅只是三两分忧虑，更多的可能就是吞云吐雾的仙境。然夜不能寐，思索沧海成就桑田的那一瞬，又可能是沧海的一生，在追求的道路上从未停止过脚布，却终究追求不到所谓的道术，曾听言：”<em>朝闻道</em>，夕死可矣”，谁又曾真正闻道，道术奇高，浮现的不过是其愿意显露的一脚，越是探究其深度，越是发觉自己的无知，愿用无所知来形容自己的道路，可能这就是所谓求道。</p>]]></content>
      
      
      <categories>
          
          <category> 意 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 孤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>落花意，流水莫晓</title>
      <link href="/2020/09/11/%E6%84%8F/heart/"/>
      <url>/2020/09/11/%E6%84%8F/heart/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="落花"><a href="#落花" class="headerlink" title="落花"></a>落花</h2><p>　　西斜的残阳挂在梗边，等待另一新生明月的升起，手头上，烟蒂徐徐上升的云雾不曾妄图留住暮色的余光，今夜注定又一个冰冷的夜晚，不知道哪一朵争相斗艳的花朵又会凋零，葬在这山岗，葬在这无情的深夜中，哪怕黑夜传递声声哭泣，哪怕是那冰冷的山泉被凝结成没有心的形状，落花不会知晓，流水亦不会诉说，等待明天哪支枝头又会展现一摸孤意，你知晓？我莫知…<br>&nbsp;</p><h2 id="流水"><a href="#流水" class="headerlink" title="流水"></a>流水</h2><p>　 　即使是那缠绵西去的溪流，也将会化为雾雨重新亲吻这片土地，若是我，必散去那手中的雨伞，重温那份不舍，我知会她的意愿，亦或者不知会她的情思，我只想接住那为数不多冰冷城市中的情感，慰藉心中的不安，除去颇为浮躁的外表，在心中又埋下一颗伤感的种子，让与另一个等待播种的人。<br>&nbsp;</p><h2 id="知意"><a href="#知意" class="headerlink" title="知意"></a>知意</h2><p>​         凋零的碎花，抑或是捧于手心的流水，任岁月匆匆打磨，磨平艳丽花瓣的颜色，磨平流水奔赴远方的那一抹决然，更是磨平了曾经心中的那一份期待，可能生活在钢铁混泥的城市本身就是一种悲哀，夜晚灯火阑珊确实令人向往，然而背光处，深夜寂静的孤独确是又放大了几分。隔日微亮的彷徨浓郁的吹散不开，像是一记重锤，狠狠的垂在心头，让人窒息，苟延残喘中还是得迎接新的一天的到来，仿佛时间会追着昨天的步伐，将今天的心脏撕碎。</p>]]></content>
      
      
      <categories>
          
          <category> 意 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 意 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建驿站</title>
      <link href="/2020/09/02/hello-world/"/>
      <url>/2020/09/02/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><blockquote><p>搭建所用框架</p></blockquote><p><code>github+hexo+coding双向部署似乎需要域名，当前还不能快速的访问此博客，可自行百度GitHub+coding双向部署</code>  </p><blockquote><p>关于主题  </p></blockquote><p><code>云游君的yun主题，题主搭的很优美，我的...</code>  </p><blockquote><p> 题外话  </p></blockquote><p><code>一直很羡慕别人都有自己的博客，直到某一天突然看到yun主题,bling bling 的向我招手，终于用我贫穷的知识弄好，就从这篇文章开始记录吧。</code></p><p>  <img src="https://cdn.jsdelivr.net/gh/weixinwuyu/CDN/img/Exhibition1.jpg" alt="first-commit" loading="lazy">  </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
